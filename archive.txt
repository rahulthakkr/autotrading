# Matching estimated previous strike to strike from position book

        positions = obj.position()['data']
        buy_symbol_pe = f'{self.name}{expirytobuy}{buy_strike}PE'
        buy_symbol_ce = f'{self.name}{expirytobuy}{buy_strike}CE'
        buy_ce_quantity_check = lookup_and_return(positions, 'tradingsymbol', buy_symbol_ce, 'cfsellqty')
        buy_pe_quantity_check = lookup_and_return(positions, 'tradingsymbol', buy_symbol_pe, 'cfsellqty')
        quantity_to_buy = self.lot_size * quantity_in_lots * multiple_of_orders

        strike_matches = int(float(buy_pe_quantity_check)) == quantity_to_buy and \
                         int(float(buy_ce_quantity_check)) == quantity_to_buy

        if not strike_matches:
            notifier(
                f'Buy strike {buy_strike} does not match position book. ' +
                f'Scanning position book for correct strike.', self.webhook_url)
            possible_strikes = np.arange(buy_strike - self.base * 3, buy_strike + self.base * 3, self.base)
            for strike in possible_strikes:
                buy_symbol_pe = f'{self.name}{expirytobuy}{strike}PE'
                buy_symbol_ce = f'{self.name}{expirytobuy}{strike}CE'
                buy_ce_quantity_check = lookup_and_return(positions, 'tradingsymbol', buy_symbol_ce, 'cfsellqty')
                buy_pe_quantity_check = lookup_and_return(positions, 'tradingsymbol', buy_symbol_pe, 'cfsellqty')
                if int(float(buy_pe_quantity_check)) == quantity_to_buy and \
                        int(float(buy_ce_quantity_check)) == quantity_to_buy:
                    buy_strike = strike
                    notifier(f'Buy strike changed to {strike}.', self.webhook_url)
                    break
            else:
                notifier('Could not find matching strike. Please check manually.', self.webhook_url)
                raise Exception('Could not find matching strike.')

# Opening and writing data to text files

atm_sell_strike = 18150
otm_call_buy_strike = 18500
otm_put_buy_strike = 17800

with open("daily_butterfly.txt", "w") as file:
    file.write(f'ATM: {atm_sell_strike}\nCall hedge: {otm_call_buy_strike}\nPut hedge: {otm_put_buy_strike}')


with open('daily_butterfly.txt', 'r') as file:
    strikes = file.readlines()
    strikes = [int(strike.rstrip().split(':')[1]) for strike in strikes]